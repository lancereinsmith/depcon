name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv pip install -e ".[dev,test]"
        
    - name: Debug environment
      run: |
        python --version
        uv --version
        pip list | grep -E "(pytest|coverage|depcon)"
        
    - name: Test package installation
      run: |
        depcon --version
        depcon --help

    - name: Run linting
      run: |
        ruff check src/ tests/ || echo "Ruff linting failed, but continuing..."
        black --check src/ tests/ || echo "Black formatting check failed, but continuing..."

    - name: Run type checking
      run: |
        mypy src/ || echo "Type checking failed, but continuing..."

    - name: Run tests without coverage
      run: |
        pytest -v
        
    - name: Run tests with coverage
      run: |
        pytest --cov=depcon --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv pip install -e ".[dev]"

    - name: Build package
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv pip install -e ".[dev]"

    - name: Run security checks
      run: |
        # Install safety for security checks
        uv pip install safety
        safety check

  integration:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install depcon
      run: |
        uv pip install -e "."

    - name: Test basic functionality
      run: |
        # Test help command
        depcon --help
        
        # Test convert help
        depcon convert --help
        
        # Test show help
        depcon show --help
        
        # Test validate help
        depcon validate --help

    - name: Test with example requirements
      run: |
        # Create test requirements file
        echo "requests>=2.25.0" > test-requirements.txt
        echo "numpy>=1.20.0" >> test-requirements.txt
        
        # Test conversion
        depcon convert -r test-requirements.txt --project-name "test-project" --verbose
        
        # Test show
        depcon show
        
        # Test validate
        depcon validate
        
        # Clean up
        rm test-requirements.txt
